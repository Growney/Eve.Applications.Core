@inject Eve.EveAuthTool.Standard.Helpers.ISingleParameters singles
@inject Eve.EveAuthTool.Standard.Helpers.IScopeParameters scoped
@using Gware.Standard.Data;
@model IEnumerable<Eve.EveAuthTool.Standard.Security.Rules.AuthRule>
@{
    ViewData["Title"] = "Rules";
    var breadcrumbs = new List<Breadcrumb>()
{
new Breadcrumb(){ Controller="Management",Action="Index",Text="Management"  }
};
}
@section Breadcrumbs{
<partial name="breadcrumbs" model="breadcrumbs">
}
@section Styles{
    <link rel="stylesheet" href="~/css/rule.css" />
}
@section Scripts{
    <script src="~/js/management.js"></script>
}
    <p>Rules allow you to configure what roles in game characters are given. Each rule is checked in ascending order by priority. The match all option will force the character to meet all of the relationships in a rule before they are matched. When match all is checked and no rules are provided the rule will always match, this is useful for creating a public rule. Make sure you put your rules in the correct order!   </p>
<a asp-action="EditRule" asp-controller="Management" asp-route-ruleID="-1">Add</a>
<div class="rule-list">
    @foreach (var rule in Model)
    {
        var role = Eve.EveAuthTool.Standard.Security.Rules.Role.Get<Eve.EveAuthTool.Standard.Security.Rules.Role>(scoped.TenantController, rule.RoleId);
        <div data-rule-id="@rule.Id" class="theme-border theme-text rule">
            <div class="rule-info">

                <div>Role - @role.Name</div>

                <div>Priority - @rule.Ordinal</div>
                <div>Match All - @rule.MatchAll</div>
                <a asp-action="EditRule" asp-controller="Management" asp-route-ruleID="@rule.Id"><i class="fas fa-edit"></i></a>
                <a onclick="DeleteAuthRule(this,@rule.Id)"><i class="fas fa-times"></i></a>
            </div>
            <div class="rule-name bold">@rule.Name</div>
            <div class="rule-relationship-header bold">Relationships</div>
            <div class="rule-relationships">

                @foreach (var relationship in rule.Relationships)
                {
                    <div class="rule-relationship">
                        <img class="rule-relationship-image" src="@singles.ESIConfiguration.GetImageSource(relationship.EntityType,relationship.EntityID,32)">
                        <div class="rule-relationship-type">@(Gware.Standard.Data.EnumDisplayAttribute.GetEnumString(relationship.Relationship))</div>
                        <div class="rule-relationship-entity-name">@await relationship.GetRelationshipEntityName(scoped.TenantController, singles.PublicDataProvider)</div>
                    </div>
                }
            </div>


        </div>

    }
</div>
